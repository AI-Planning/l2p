(define (domain survive_deserted_island)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types player survivor - human fire fish leaves raft rock spear tinder vines water wood - item beach jungle ocean treetop - location direction human item location - object)
    (:predicates (at ?obj - object ?loc - location)  (at_ocean ?loc - location)  (can_light_fire ?loc - location)  (connected ?loc1 - location ?dir - direction ?loc2 - location)  (cooked ?item - item)  (drank ?water - water)  (groove ?wood - wood)  (has_escaped ?player - player)  (has_fire ?loc - location)  (has_fish ?loc - location)  (has_friend ?survivor - survivor)  (has_shelter ?loc - location)  (has_water_source ?loc - location)  (has_wood ?loc - location)  (inventory ?player ?item)  (is_safe ?loc - location)  (treated ?water - water))
    (:action build_raft
        :parameters (?player - human ?location - location ?raft - raft)
        :precondition (and (at ?player ?location) (at_ocean ?location))
        :effect (and (has_escaped ?player))
    )
     (:action build_shelter
        :parameters (?player - human ?location - location)
        :precondition (and (at ?player ?location) (is_safe ?location))
        :effect (and (has_shelter ?location))
    )
     (:action carve_groove
        :parameters (?player - human ?wood - wood)
        :precondition (inventory ?player ?wood)
        :effect (and (groove ?wood))
    )
     (:action chop_wood
        :parameters (?player - human ?location - location ?wood - wood)
        :precondition (and (at ?player ?location) (has_wood ?location))
        :effect (and (inventory ?player ?wood))
    )
     (:action clean_water
        :parameters (?player - human ?location - location ?water - water)
        :precondition (and (at ?player ?location) (inventory ?player ?water) (not (treated ?water)) (has_fire ?location))
        :effect (and (treated ?water))
    )
     (:action cook_fish
        :parameters (?player - human ?location - location ?fish - fish)
        :precondition (and (inventory ?player ?fish) (at ?player ?location) (has_fire ?location))
        :effect (and (cooked ?fish))
    )
     (:action drink_water
        :parameters (?player - human ?water - water)
        :precondition (and (inventory ?player ?water) (treated ?water))
        :effect (and (drank ?player) (not (inventory ?player ?water)))
    )
     (:action find_other_survivors
        :parameters (?player - human ?location - location ?survivor - survivor)
        :precondition (and (at ?player ?location) (has_survivors ?location))
        :effect (and (has_friend ?player))
    )
     (:action get
        :parameters (?player - human ?item - object ?location - location)
        :precondition (and (at ?player ?location) (at ?item ?location))
        :effect (and (not (at ?item ?location)) (inventory ?player ?item))
    )
     (:action get_water
        :parameters (?player - human ?location - location ?water - water)
        :precondition (and (at ?player ?location) (has_water_source ?location))
        :effect (and (inventory ?player ?water))
    )
     (:action go
        :parameters (?player - human ?current_location - location ?target_location - location ?direction - direction)
        :precondition (and (at ?player ?current_location) (connected ?current_location ?target_location ?direction))
        :effect (and (not (at ?player ?current_location)) (at ?player ?target_location))
    )
     (:action hunt_fish
        :parameters (?player - human ?location - location ?spear - spear ?fish - fish)
        :precondition (and (at ?player ?location) (has_fish ?location) (inventory ?player ?spear))
        :effect (and (inventory ?player ?fish))
    )
     (:action light_fire
        :parameters (?player - human ?location - location)
        :precondition (and (at ?player ?location) (can_light_fire ?location))
        :effect (and (has_fire ?location))
    )
     (:action make_weapon
        :parameters (?player - human ?wood - wood ?rock - rock ?spear - spear)
        :precondition (and (inventory ?player ?wood) (inventory ?player ?rock))
        :effect (and (inventory ?player ?spear))
    )
)