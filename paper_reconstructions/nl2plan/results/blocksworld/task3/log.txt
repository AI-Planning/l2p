STEP ONE: TYPE EXTRACTION

{'block': 'The individual units that can be picked and placed by the robot arm. They can be stacked or placed on a table.', 'table': 'A flat surface where blocks can be placed. It serves as a base for the blocks.', 'movable_object': 'A meta-type that includes all objects that can be moved by the robot arm, specifically blocks in this case.'}

--------------------
STEP TWO: HIERARCHY CONSTRUCTION

{'object': 'Object is always root, everything is an object', 'children': [{'movable_object': 'A meta-type that includes all objects that can be moved by the robot arm.', 'children': [{'block': 'The individual units that can be picked and placed by the robot arm.', 'children': []}]}, {'table': 'A flat surface where blocks can be placed.', 'children': []}]}

--------------------
STEP THREE: ACTION EXTRACTION

{'pick_block': 'The robot arm picks up a block from the table or from on top of another block. Requires the block to be on the table or on another block. Example: robot_arm picks up block_1 from the table.', 'place_on_table': 'The robot arm places a block onto the table. Requires the block to be currently held by the robot arm. Example: robot_arm places block_1 on the table.', 'place_on_block': 'The robot arm places a block on top of another block. Requires the block to be currently held by the robot arm and the target block to be stable and not currently held. Example: robot_arm places block_1 on block_2.', 'release_block': 'The robot arm releases a block that it is currently holding. Example: robot_arm releases block_1.'}

--------------------
STEP FOUR: ACTION CONSTRUCTION

ACTIONS:
{'name': 'pick_block', 'params': OrderedDict([('?b', 'block')]), 'preconditions': '(and\n    (or \n        (on_table ?b) ; The block is on the table\n        (exists (?b2 - block) (on_block ?b ?b2)) ; The block is on top of another block\n    )\n    (not (held ?b)) ; The block is not currently held\n)', 'effects': '(and\n    (held ?b) ; The block is now held by the robot arm\n    (not (on_table ?b)) ; The block is no longer on the table\n    (not (on_block ?b ?b2)) ; The block is no longer on top of another block\n)'}
{'name': 'place_on_table', 'params': OrderedDict([('?b', 'block')]), 'preconditions': '(and\n    (held ?b) ; The block is currently held by the robot arm\n)', 'effects': '(and\n    (not (held ?b)) ; The block is no longer held by the robot arm\n    (on_table ?b) ; The block is now on the table\n)'}
{'name': 'place_on_block', 'params': OrderedDict([('?b1', 'block'), ('?b2', 'block')]), 'preconditions': '(and\n    (held ?b1) ; The block ?b1 is currently held by the robot arm\n    (not (held ?b2)) ; The block ?b2 is not currently held\n    (stable ?b1) ; The block ?b1 must also be stable\n    (stable ?b2) ; The block ?b2 is stable\n)', 'effects': '(and\n    (not (held ?b1)) ; The block ?b1 is no longer held by the robot arm\n    (on_block ?b1 ?b2) ; The block ?b1 is now on top of block ?b2\n)'}
{'name': 'release_block', 'params': OrderedDict([('?b', 'block')]), 'preconditions': '(and\n    (held ?b) ; The block is currently held by the robot arm\n    (stable ?b) ; The block is stable and can be safely placed\n)', 'effects': '(and\n    (not (held ?b)) ; The block is no longer held by the robot arm\n    (on_table ?b) ; The block is placed on the table after being released\n)'}

PREDICATES:
{'name': 'on_table', 'desc': 'true if the block ?b is on the table', 'raw': '(on_table ?b - block): true if the block ?b is on the table', 'params': OrderedDict([('?b', 'block')]), 'clean': '(on_table ?b - block): true if the block ?b is on the table'}
{'name': 'on_block', 'desc': 'true if block ?b1 is on top of block ?b2', 'raw': '(on_block ?b1 - block ?b2 - block): true if block ?b1 is on top of block ?b', 'params': OrderedDict([('?b1', 'block'), ('?b2', 'block')]), 'clean': '(on_block ?b1 - block ?b2 - block): true if block ?b1 is on top of block ?b2'}
{'name': 'held', 'desc': 'true if the block ?b is currently held by the robot arm', 'raw': '(held ?b - block): true if the block ?b is currently held by the robot arm', 'params': OrderedDict([('?b', 'block')]), 'clean': '(held ?b - block): true if the block ?b is currently held by the robot arm'}
{'name': 'stable', 'desc': 'true if the block ?b is stable and can support another block on top of it.', 'raw': '(stable ?b - block): true if the block ?b is stable and can support another block on top of it', 'params': OrderedDict([('?b', 'block')]), 'clean': '(stable ?b - block): true if the block ?b is stable and can support another block on top of it.'}

--------------------
STEP FIVE: TASK EXTRACTION

OBJECTS:
red1 - block
red2 - block
blue1 - block
green1 - block
green2 - block
INITIAL STATES:
(on_block red1 green1)
(on_block red2 green2)
(on_block blue1 green1)
(on_block green1 green2)
(stable red1)
(stable red2)
(stable blue1)
(stable green1)
(stable green2)
(held red1)
GOAL STATES:
(AND 
   (on_block green1 red1) 
   (on_block green2 red2) 
   (on_block green1 blue1) 
   (on_block green2 green1) 
   (stable red1) 
   (stable red2) 
   (stable blue1) 
   (stable green1) 
   (stable green2) 
)


PDDL DOMAIN:
(define (domain blocksworld)
   (:requirements
      :strips :typing :equality :negative-preconditions :disjunctive-preconditions :universal-preconditions :conditional-effects)

   (:types 
      movable_object - object
      block - movable_object
      table - object
   )

   (:predicates 
      (on_table ?b - block) ;  true if the block ?b is on the table
      (on_block ?b1 - block ?b2 - block) ;  true if block ?b1 is on top of block ?b2
      (held ?b - block) ;  true if the block ?b is currently held by the robot arm
      (stable ?b - block) ;  true if the block ?b is stable and can support another block on top of it.
   )

   (:action pick_block
      :parameters (
         ?b - block
      )
      :precondition
         (and
             (or 
                 (on_table ?b) ; The block is on the table
                 (exists (?b2 - block) (on_block ?b ?b2)) ; The block is on top of another block
             )
             (not (held ?b)) ; The block is not currently held
         )
      :effect
         (and
             (held ?b) ; The block is now held by the robot arm
             (not (on_table ?b)) ; The block is no longer on the table
             (not (on_block ?b ?b2)) ; The block is no longer on top of another block
         )
   )

   (:action place_on_table
      :parameters (
         ?b - block
      )
      :precondition
         (and
             (held ?b) ; The block is currently held by the robot arm
         )
      :effect
         (and
             (not (held ?b)) ; The block is no longer held by the robot arm
             (on_table ?b) ; The block is now on the table
         )
   )

   (:action place_on_block
      :parameters (
         ?b1 - block
         ?b2 - block
      )
      :precondition
         (and
             (held ?b1) ; The block ?b1 is currently held by the robot arm
             (not (held ?b2)) ; The block ?b2 is not currently held
             (stable ?b1) ; The block ?b1 must also be stable
             (stable ?b2) ; The block ?b2 is stable
         )
      :effect
         (and
             (not (held ?b1)) ; The block ?b1 is no longer held by the robot arm
             (on_block ?b1 ?b2) ; The block ?b1 is now on top of block ?b2
         )
   )

   (:action release_block
      :parameters (
         ?b - block
      )
      :precondition
         (and
             (held ?b) ; The block is currently held by the robot arm
             (stable ?b) ; The block is stable and can be safely placed
         )
      :effect
         (and
             (not (held ?b)) ; The block is no longer held by the robot arm
             (on_table ?b) ; The block is placed on the table after being released
         )
   )
)

PDDL PROBLEM:
(define
   (problem blocksworld_problem)
   (:domain blocksworld)

   (:objects 
      red1 - block
      red2 - block
      blue1 - block
      green1 - block
      green2 - block
   )

   (:init
      (on_block red1 green1)
      (on_block red2 green2)
      (on_block blue1 green1)
      (on_block green1 green2)
      (stable red1)
      (stable red2)
      (stable blue1)
      (stable green1)
      (stable green2)
      (held red1)
   )

   (:goal
      (and 
         (on_block green1 red1) 
         (on_block green2 red2) 
         (on_block green1 blue1) 
         (on_block green2 green1) 
         (stable red1) 
         (stable red2) 
         (stable blue1) 
         (stable green1) 
         (stable green2) 
      )
   )

)