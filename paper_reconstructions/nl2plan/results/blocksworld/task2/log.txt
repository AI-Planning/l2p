STEP ONE: TYPE EXTRACTION

{'location': 'Places where blocks can be placed, such as the table or atop another block.', 'block': 'A movable block that can be placed on a location.'}

--------------------
STEP TWO: HIERARCHY CONSTRUCTION

[{'block': 'A movable block that can be placed on a location.', 'children': []}, {'location': 'Places where blocks can be placed, such as the table or atop another block.', 'children': [{'table': 'A specific type of location (table).', 'children': []}, {'on_block': 'A location where a block is placed atop another block.', 'children': []}]}]

--------------------
STEP THREE: ACTION EXTRACTION

{'pickup_block': 'The robot picks up a block from a location. Requires that the block is clear (no blocks on top) and the robot is not already holding another block. Example: The robot picks up block_A from block_B.', 'place_on_table': 'The robot places the currently held block onto the table. Requires that the robot is holding a block. Example: The robot places block_A on table.', 'place_on_block': 'The robot places the currently held block atop another block. Requires that the robot is holding a block and the target block is clear (no blocks on top). Example: The robot places block_A on block_B.'}

--------------------
STEP FOUR: ACTION CONSTRUCTION

ACTIONS:
{'name': 'pickup_block', 'params': OrderedDict({'?b': 'block', '?l': 'location'}), 'preconditions': '(and\n    (clear ?b) ; The block is clear (no blocks on top)\n    (at ?b ?l) ; The block is at location ?l\n    (free) ; The robot is not holding any block\n)', 'effects': '(and\n    (not (at ?b ?l)) ; The block is no longer at location ?l\n    (holding ?b) ; The robot is now holding block ?b\n    (not (free)) ; The robot is no longer free\n)'}
{'name': 'place_on_table', 'params': OrderedDict({'?b': 'block', '?t': 'table'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding block ?b\n)', 'effects': '(and\n    (not (holding ?b)) ; The robot is no longer holding block ?b\n    (at ?b ?t) ; The block is now at table ?t\n)'}
{'name': 'place_on_block', 'params': OrderedDict({'?block': 'block', '?target': 'block'}), 'preconditions': '(and\n    (holding ?block) ; The robot is currently holding ?block.\n    (clear ?target) ; The target block ?target has no blocks on top.\n)', 'effects': "(and\n    (not (holding ?block)) ; The robot is no longer holding ?block.\n    (on ?block ?target) ; ?block is now placed atop ?target.\n    (not (clear ?target)) ; ?target is no longer clear as ?block is placed on it.\n    (clear ?block) ; ?block is clear now that it's placed on ?target.\n)"}

PREDICATES:
{'name': 'clear', 'desc': 'true if no block is on top of block ?b', 'raw': '- (clear ?b - block): true if no block is on top of block ?b', 'params': OrderedDict({'?b': 'block'}), 'clean': '(clear ?b - block)'}
{'name': 'at', 'desc': 'true if block ?b is at location ?l', 'raw': '- (at ?b - block ?l - location): true if block ?b is at location ?l', 'params': OrderedDict({'?b': 'block', '?l': 'location'}), 'clean': '(at ?b - block ?l - location)'}
{'name': 'holding', 'desc': 'true if the robot is holding block ?b', 'raw': '- (holding ?b - block): true if the robot is holding block ?b', 'params': OrderedDict({'?b': 'block'}), 'clean': '(holding ?b - block)'}
{'name': 'free', 'desc': 'true if the robot is not holding any block', 'raw': '- (free): true if the robot is not holding any block', 'params': OrderedDict(), 'clean': '(free )'}
{'name': 'on', 'desc': 'block ?b is placed on top of block ?t.', 'raw': "- (on ?b - block ?t - block): 'block ?b is placed on top of block ?t.'", 'params': OrderedDict({'?b': 'block', '?t': 'block'}), 'clean': '(on ?b - block ?t - block)'}

--------------------
STEP FIVE: TASK EXTRACTION

OBJECTS:
{'red': 'block', 'blue': 'block', 'green': 'block', 'yellow': 'block', 'the_table': 'location'}
INITIAL STATES:
[{'pred_name': 'on', 'params': ['blue', 'red'], 'neg': False}, {'pred_name': 'at', 'params': ['red', 'the_table'], 'neg': False}, {'pred_name': 'on', 'params': ['green', 'yellow'], 'neg': False}, {'pred_name': 'at', 'params': ['yellow', 'the_table'], 'neg': False}, {'pred_name': 'clear', 'params': ['blue'], 'neg': False}, {'pred_name': 'clear', 'params': ['green'], 'neg': False}, {'pred_name': 'free', 'params': [], 'neg': False}]
GOAL STATES:
[{'pred_name': 'at', 'params': ['red', 'the_table'], 'neg': False}, {'pred_name': 'on', 'params': ['green', 'red'], 'neg': False}, {'pred_name': 'on', 'params': ['blue', 'green'], 'neg': False}, {'pred_name': 'on', 'params': ['yellow', 'blue'], 'neg': False}]


PDDL DOMAIN:
(define (domain blocksworld)
   (:requirements
      :strips :typing :equality :negative-preconditions :disjunctive-preconditions :universal-preconditions :conditional-effects :existential-preconditions)

   (:types 
      block
      on_block table - location
   )

   (:predicates 
      (clear ?b - block)
      (at ?b - block ?l - location)
      (holding ?b - block)
      (free )
      (on ?b - block ?t - block)
   )

   (:action pickup_block
      :parameters (
         ?b - block ?l - location
      )
      :precondition
         (and
             (clear ?b) ; The block is clear (no blocks on top)
             (at ?b ?l) ; The block is at location ?l
             (free) ; The robot is not holding any block
         )
      :effect
         (and
             (not (at ?b ?l)) ; The block is no longer at location ?l
             (holding ?b) ; The robot is now holding block ?b
             (not (free)) ; The robot is no longer free
         )
   )

   (:action place_on_table
      :parameters (
         ?b - block ?t - table
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding block ?b
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding block ?b
             (at ?b ?t) ; The block is now at table ?t
         )
   )

   (:action place_on_block
      :parameters (
         ?block ?target - block
      )
      :precondition
         (and
             (holding ?block) ; The robot is currently holding ?block.
             (clear ?target) ; The target block ?target has no blocks on top.
         )
      :effect
         (and
             (not (holding ?block)) ; The robot is no longer holding ?block.
             (on ?block ?target) ; ?block is now placed atop ?target.
             (not (clear ?target)) ; ?target is no longer clear as ?block is placed on it.
             (clear ?block) ; ?block is clear now that it's placed on ?target.
         )
   )
)

PDDL PROBLEM:
(define
   (problem blocksworld_problem)
   (:domain blocksworld)

   (:objects 
      red - block
      blue - block
      green - block
      yellow - block
      the_table - location
   )

   (:init
      (on blue red)
      (at red the_table)
      (on green yellow)
      (at yellow the_table)
      (clear blue)
      (clear green)
      (free )
   )

   (:goal
      (and 
         (at red the_table)
         (on green red)
         (on blue green)
         (on yellow blue)
      )
   )
)