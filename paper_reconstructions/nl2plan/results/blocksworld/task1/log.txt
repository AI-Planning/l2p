--------------------
STEP FOUR: ACTION CONSTRUCTION

ACTIONS:
{'name': 'pick_block', 'params': OrderedDict([('?b', 'block')]), 'preconditions': '(and\n    (clear ?b) ; The block ?b is clear (not supporting any other block)\n    (not (holding ?b)) ; The robot arm is not holding any block\n)', 'effects': '(and\n    (holding ?b) ; The robot arm is now holding block ?b\n    (not (clear ?b)) ; The block ?b is no longer clear since it is being held\n)'}
{'name': 'place_on_table', 'params': OrderedDict([('?b', 'block'), ('?table', 'table')]), 'preconditions': '(and\n    (holding ?b) ; The robot arm is holding the block\n    (clear ?b) ; The block being placed is clear for placement\n)', 'effects': '(and\n    (not (holding ?b)) ; The robot arm is no longer holding the block\n    (clear ?b) ; The block being placed is clear\n    (on_table ?b) ; The block is now on the table\n)'}
{'name': 'place_on_block', 'params': OrderedDict([('?target_block', 'block'), ('?held_block', 'block')]), 'preconditions': '(and\n    (holding ?held_block) ; The robot arm is holding a block\n    (clear ?target_block) ; The target block must be clear\n    (clear ?held_block) ; The held block must also be clear\n    (not (= ?held_block ?target_block)) ; The target block cannot be the same as the held block\n)', 'effects': '(and\n    (not (holding ?held_block)) ; The robot arm is no longer holding the block\n    (not (clear ?target_block)) ; The target block is no longer clear after placing the held block on it\n    (on ?held_block ?target_block) ; The held block is now on top of the target block\n)'}

PREDICATES:
{'name': 'clear', 'desc': 'true if block ?b is not supporting any other block.', 'raw': '- (clear ?b - block): true if block ?b is not supporting any other block.', 'params': OrderedDict([('?b', 'block')]), 'clean': '(clear ?b - block)'}
{'name': 'holding', 'desc': 'true if the robot arm is currently holding block ?b.', 'raw': '- (holding ?b - block): true if the robot arm is currently holding block ?b.', 'params': OrderedDict([('?b', 'block')]), 'clean': '(holding ?b - block)'}
{'name': 'on_table', 'desc': 'true if block ?b is placed on the table', 'raw': "- (on_table ?b - block): 'true if block ?b is placed on the table'", 'params': OrderedDict([('?b', 'block')]), 'clean': '(on_table ?b - block)'}
{'name': 'on', 'desc': 'true if block ?b1 is placed on top of block ?b2', 'raw': "- (on ?b1 - block ?b2 - block): 'true if block ?b1 is placed on top of block ?b2'", 'params': OrderedDict([('?b1', 'block'), ('?b2', 'block')]), 'clean': '(on ?b1 - block ?b2 - block)'}

--------------------
STEP FIVE: TASK EXTRACTION

OBJECTS:
{'blue_block': 'block', 'red_block': 'block', 'yellow_block': 'block', 'green_block': 'block', 'fixed_table': 'table'}
INITIAL STATES:
[{'pred_name': 'on', 'params': ['blue_block', 'red_block'], 'neg': False}, {'pred_name': 'on', 'params': ['red_block', 'yellow_block'], 'neg': False}, {'pred_name': 'on_table', 'params': ['yellow_block'], 'neg': False}, {'pred_name': 'on_table', 'params': ['green_block'], 'neg': False}, {'pred_name': 'clear', 'params': ['green_block'], 'neg': False}, {'pred_name': 'clear', 'params': ['yellow_block'], 'neg': True}, {'pred_name': 'clear', 'params': ['blue_block'], 'neg': True}, {'pred_name': 'clear', 'params': ['red_block'], 'neg': True}]
GOAL STATES:
[{'pred_name': 'on', 'params': ['red_block', 'green_block'], 'neg': False}, {'pred_name': 'clear', 'params': ['green_block'], 'neg': False}]


PDDL DOMAIN:
(define (domain blocksworld)
   (:requirements
      :strips :typing :equality :negative-preconditions :disjunctive-preconditions :universal-preconditions :conditional-effects)

   (:types 
      block table - physical_object
   )

   (:predicates 
      (clear ?b - block)
      (holding ?b - block)
      (on_table ?b - block)
      (on ?b1 - block ?b2 - block)
   )
)

PDDL PROBLEM:
(define
   (problem blocksworld_problem)
   (:domain blocksworld)

   (:objects 
      blue_block - block
      red_block - block
      yellow_block - block
      green_block - block
      fixed_table - table
   )

   (:init
      (on blue_block red_block)
      (on red_block yellow_block)
      (on_table yellow_block)
      (on_table green_block)
      (clear green_block)
      (not (clear yellow_block))
      (not (clear blue_block))
      (not (clear red_block))
   )

   (:goal
      (and 
         (on red_block green_block)
         (clear green_block)
      )
   )
)