(define (domain test_domain)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types arm - mechanism block table - physical_object)
    (:predicates (at ?a - arm ?t - table)  (clear ?b - block)  (holding ?a - arm ?b - block)  (on ?b1 - block ?b2 - block))
    (:action check_clear
        :parameters (?a - arm ?b - block)
        :precondition (and (at ?a ?t) (not (holding ?a ?b)) (clear ?b))
        :effect (clear ?b)
    )
     (:action pickup
        :parameters (?a - arm ?b - block ?t - table)
        :precondition (and (at ?a ?t) (clear ?b) (not (holding ?a ?b)) (at ?b ?t))
        :effect (and (holding ?a ?b) (not (at ?b ?t)) (not (clear ?b)))
    )
     (:action putdown
        :parameters (?a - arm ?b - block ?t - table)
        :precondition (and (holding ?a ?b) (not (at ?b ?t)))
        :effect (and (not (holding ?a ?b)) (at ?b ?t) (clear ?b))
    )
     (:action stack
        :parameters (?a - arm ?b1 - block ?b2 - block ?t - table)
        :precondition (and (holding ?a ?b1) (clear ?b2) (at ?a ?t))
        :effect (and (not (holding ?a ?b1)) (on ?b1 ?b2) (not (clear ?b2)))
    )
     (:action unstack
        :parameters (?a - arm ?b1 - block ?b2 - block ?t - table)
        :precondition (and (at ?a ?t) (clear ?b1) (not (holding ?a ?b1)) (on ?b1 ?b2))
        :effect (and (holding ?a ?b1) (not (on ?b1 ?b2)) (clear ?b2))
    )
)