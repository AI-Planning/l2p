Use the following checklist:
1. Are any necessary objects missing? Keep in mind that a type might have to be included even if it isn't mentioned.

2. Are any unnecessary objects included? If things are irrelevant they shouldn't be included.

3. Are any objects defined with the wrong type? The objects should of course be defined correctly. 

4. Are any unnecessary or incorrect predicates declared? We should only initialize that which is actually true.

5. Are any needed or expected predicates missing from the initial state? Everything has to be defined in the problem file, nothing is assumed.

6. Is anything missing from the goal state? Everything we wish to require should be checked.

7. Is anything unnecessary included in the goal description? We shouldn't check more things than needed.

8. Should any predicate be used in a symmetrical manner? For example, if we want to build a road between A and B, the goal should allow either "(road_between A B)" or "(road_between B A)" to make the PDDL robust. This should ALWAYS be done even if this could also be handled in the action. This should not apply to things physically (i.e. A block on B and B block on A)

9. Does the logic of each initial and goal state make sense? Does it align with the problem description?

10. Do any of the object variables have the same name as its type? Example: 'chair - chair' is incorrect.

11. Are the object names meaningful? Will a human be able to interpret them easily?

12. Are the predicates used missing the correct parameters? Example: Domain PDDL contains (free ?l - lock ?a arm), so it would be incorrect for PDDL task predicate to be (free ?l1 - lock)