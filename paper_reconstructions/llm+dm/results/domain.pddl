(define (domain logistics)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types city location package plane truck)
    (:predicates (at-location ?x - package)  (connected ?from - location ?to - location)  (in-city ?l - location ?c - city)  (package-loaded ?p - package ?t - truck)  (truck-empty ?t - truck))
    (:action drive_truck
        :parameters (?t - truck ?from - location ?to - location ?c - city)
        :precondition (and (at-location ?t ?from) (connected ?from ?to) (in-city ?from ?c) (in-city ?to ?c))
        :effect (and (not (at-location ?t ?from)) (at-location ?t ?to))
    )
     (:action fly_airplane
        :parameters (?p - plane ?from - location ?to - location)
        :precondition (and (connected ?from ?to) (in-city ?from ?c1) (in-city ?to ?c2) (not (= ?c1 ?c2)))
        :effect (and (not (in-city ?from ?c1)) (in-city ?to ?c2))
    )
     (:action load_airplane
        :parameters (?p - package ?a - plane)
        :precondition (and (at-location ?p) (not (package-loaded ?p ?a)))
        :effect (and (package-loaded ?p ?a) (not (at-location ?p)))
    )
     (:action load_truck
        :parameters (?p - package ?t - truck)
        :precondition (and (at-location ?p) (truck-empty ?t))
        :effect (and (not (at-location ?p)) (not (truck-empty ?t)) (package-loaded ?p ?t))
    )
     (:action unload_airplane
        :parameters (?p - package ?a - plane)
        :precondition (and (package-loaded ?p ?a) (at-location ?a))
        :effect (and (not (package-loaded ?p ?a)) (at-location ?p))
    )
     (:action unload_truck
        :parameters (?p - package ?t - truck ?l - location)
        :precondition (and (package-loaded ?p ?t) (not (truck-empty ?t)) (at-location ?t ?l))
        :effect (and (not (package-loaded ?p ?t)) (not (truck-empty ?t)) (at-location ?p ?l))
    )
)