(define (domain logistics)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types city location package plane truck)
    (:predicates (airport-location ?c - city)  (package-at ?p - package ?l - location)  (truck-at ?t - truck ?l - location)  (truck-has-space ?t - truck)  (truck-holding ?t - truck ?p - package))
    (:action drive_truck
        :parameters (?t - truck ?from - location ?to - location ?c - city)
        :precondition (and (truck-at ?t ?from) (truck-at ?t ?c))
        :effect (and (not (truck-at ?t ?from)) (truck-at ?t ?to))
    )
     (:action fly_airplane
        :parameters (?p - plane ?t - truck ?from - city ?to - city)
        :precondition (and (truck-at ?t ?from) (airport-location ?from) (airport-location ?to))
        :effect (and (not (truck-at ?t ?from)) (truck-at ?t ?to))
    )
     (:action load_airplane
        :parameters (?p - package ?a - plane ?l - location ?t - truck)
        :precondition (and (package-at ?p ?l) (truck-at ?t ?l) (truck-has-space ?t))
        :effect (and (not (package-at ?p ?l)) (truck-holding ?t ?p))
    )
     (:action load_truck
        :parameters (?t - truck ?p - package ?l - location)
        :precondition (and (truck-at ?t ?l) (package-at ?p ?l) (truck-has-space ?t))
        :effect (and (not (package-at ?p ?l)) (truck-holding ?t ?p))
    )
     (:action unload_airplane
        :parameters (?p - package ?pl - plane ?t - truck ?l - location)
        :precondition (and (truck-at ?t ?l) (package-at ?p ?pl) (truck-has-space ?t))
        :effect (and (not (package-at ?p ?pl)) (truck-holding ?t ?p) (package-at ?p ?l))
    )
     (:action unload_truck
        :parameters (?t - truck ?p - package ?l - location)
        :precondition (and (truck-at ?t ?l) (truck-holding ?t ?p))
        :effect (and (not (truck-holding ?t ?p)) (package-at ?p ?l))
    )
)