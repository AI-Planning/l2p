(define (domain logistics)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types city location package plane truck)
    (:predicates (airplane-at-airport ?a - plane)  (at-airport ?a - plane ?l - location)  (connected-cities ?from_city - city ?to_city - city)  (location-clear ?l - location)  (location-connected ?from - location ?to - location ?c - city)  (package-at ?p - package ?l - location)  (package-at-location ?p - package ?l - location)  (package-clear ?p - package)  (package-in-airplane ?p - package ?a - plane)  (package-on-plane ?p - package ?a - plane)  (plane-holding ?a - plane ?p - package)  (truck-at ?t - truck ?l - location)  (truck-has-space ?t - truck)  (truck-holding ?t - truck ?p - package))
    (:action drive_truck
        :parameters (?t - truck ?from - location ?to - location ?c - city)
        :precondition (and (truck-at ?t ?from ?c) (location-connected ?from ?to ?c))
        :effect (and (not (truck-at ?t ?from ?c)) (truck-at ?t ?to ?c))
    )
     (:action fly_airplane
        :parameters (?plane - plane ?from_city - city ?to_city - city)
        :precondition (and (at-airport ?plane ?from_city) (connected-cities ?from_city ?to_city))
        :effect (and (not (at-airport ?plane ?from_city)) (at-airport ?plane ?to_city))
    )
     (:action load_airplane
        :parameters (?p - package ?a - plane)
        :precondition (and (package-in-airplane ?p ?a) (airplane-at-airport ?a) (package-clear ?p))
        :effect (and (not (package-clear ?p)) (package-in-airplane ?p ?a))
    )
     (:action load_truck
        :parameters (?p - package ?t - truck ?l - location)
        :precondition (and (truck-at ?t ?l) (package-at ?p ?l) (truck-has-space ?t))
        :effect (and (not (package-at ?p ?l)) (truck-holding ?t ?p))
    )
     (:action unload_airplane
        :parameters (?p - package ?a - plane ?l - location)
        :precondition (and (plane-holding ?a) (package-on-plane ?p ?a) (location-clear ?l))
        :effect (and (not (package-on-plane ?p ?a)) (not (location-clear ?l)) (package-at-location ?p ?l))
    )
     (:action unload_truck
        :parameters (?p - package ?t - truck ?l - location)
        :precondition (and (truck-holding ?t ?p) (truck-at ?t ?l))
        :effect (and (not (truck-holding ?t ?p)) (package-at ?p ?l))
    )
)