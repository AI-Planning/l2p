(define (domain logistics)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types city location package plane truck)
    (:predicates (airplane-at ?a - plane ?l - location)  (airplane-holding ?a - plane ?p - package)  (airport-location ?c - city ?l - location)  (package-at ?p - package ?l - location)  (truck-at ?t - truck ?l - location)  (truck-has-space ?t - truck)  (truck-holding ?t - truck ?p - package))
    (:action drive_truck
        :parameters (?t - truck ?l1 - location ?l2 - location ?c - city)
        :precondition (and (truck-at ?t ?l1) (not (equal ?l1 ?l2)))
        :effect (and (not (truck-at ?t ?l1)) (truck-at ?t ?l2))
    )
     (:action fly_airplane
        :parameters (?a - plane ?t - truck ?from_city - city ?to_city - city ?p - package ?from_airport - location ?to_airport - location)
        :precondition (and (airplane-at ?a ?from_airport) (truck-holding ?t ?p) (airport-location ?from_city ?from_airport) (airport-location ?to_city ?to_airport))
        :effect (and (not (airplane-at ?a ?from_airport)) (not (truck-holding ?t ?p)) (airplane-holding ?a ?p) (airplane-at ?a ?to_airport))
    )
     (:action load_airplane
        :parameters (?p - package ?a - plane ?t - truck ?l - location)
        :precondition (and (package-at ?p ?l) (truck-at ?t ?l) (truck-holding ?t ?p))
        :effect (and (not (package-at ?p ?l)) (not (truck-holding ?t ?p)) (airplane-holding ?a ?p))
    )
     (:action load_truck
        :parameters (?p - package ?t - truck ?l - location)
        :precondition (and (package-at ?p ?l) (truck-at ?t ?l) (truck-has-space ?t))
        :effect (and (not (package-at ?p ?l)) (truck-holding ?t ?p))
    )
     (:action unload_airplane
        :parameters (?a - plane ?p - package ?l - location ?t - truck)
        :precondition (and (airplane-holding ?a ?p) (package-at ?p ?l) (truck-at ?t ?l) (truck-has-space ?t))
        :effect (and (not (airplane-holding ?a ?p)) (truck-holding ?t ?p) (package-at ?p ?l))
    )
     (:action unload_truck
        :parameters (?t - truck ?p - package ?l - location)
        :precondition (and (truck-at ?t ?l) (truck-holding ?t ?p))
        :effect (and (not (truck-holding ?t ?p)) (package-at ?p ?l))
    )
)