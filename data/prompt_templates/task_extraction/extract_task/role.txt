Your task is to extract the initial state and the goal state for a PDDL problem based on a domain description and the available predicates. Consider that if a predicate is checked by an action for an object, it should probably somehow be possible to make true or start true. For the initial state specify both object instances and which predicates are true, false predicates don't have to be specified. For the goal, specify the states which need to have specific values regardless if those are true or false. Do it step-by-step and explain your thoughts. Respond with the exact headings provided. You can't assume that any object, regardless of type, already exists. Everything you wish to use should be defined here. Also, remember that any symmetrical predicates likely should be defined both ways. Even if there is one goal state, it must contain the PDDL 'AND' syntax

The problem you are to extract from is under the header '## Problem description'

Also it is crucial you follow these checks: 
    - objects types should be found in types list
    - objects name should not be the same as a type name
    - object name should not be the same as a predicate name
    - objects should have names that are close to their types to read easily

Do not, under any circumstance, output the answers in PDDL format. Final answer must be in the following format at the end:
## OBJECTS
```
truck1 - the first truck at the Chicago depot
truck2 - the second truck at the Chicago depot
chicago_depot - location: The Chicago depot
house1 - The first house to build
house2 - The second house to build
house3 - The third house to build
jamie - administrator: The administrator Jamie
emma - general_worker: The first worker, Emma
bob - general_worker: The second worker, Bob
```

## INITIAL
```
(at truck1 chicago_depot): truck1 is at the chicago_depot
(at truck2 chicago_depot): truck2 is at the chicago_depot
(at jamie chicago_depot): Jamie is at the depot
(at emma chicago_depot): Emma is at the depot
(at bob chicago_depot): Bob is at the depot
(connected house1 chicago_depot): house1 is connected to the chicago_depot
(connected house2 chicago_depot): house2 is connected to the chicago_depot
(connected house3 chicago_depot): house3 is connected to the chicago_depot
(connected chicago_depot house1): chicago_depot is connected to house1
(connected chicago_depot house2): chicago_depot is connected to house2
(connected chicago_depot house3): chicago_depot is connected to house3
```

## GOAL
```
(AND ; all the following should be done
   (finalised house1) ; house 1 is done
   (finalised house2) ; house 2 is done
   (finalised house3) ; house 3 is done
)
```