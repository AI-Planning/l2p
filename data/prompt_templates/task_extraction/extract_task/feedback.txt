Use the following checklist:
1. Are any necessary objects missing? Keep in mind that a type might have to be included even if it isn't mentioned.
2. Are any unnecessary objects included? If things are irrelevant they shouldn't be included.
3. Are any objects defined with the wrong type? The objects should of course be defined correctly. 
4. Are any unnecessary or incorrect predicates declared? We should only initialize that which is actually true.
5. Are any needed or expected predicates missing from the initial state? Everything has to be defined in the problem file, nothing is assumed.
6. Is anything missing from the goal state? Everything we wish to require should be checked.
7. Is anything unnecessary included in the goal description? We shouldn't check more things than needed.
8. Should any predicate be used in a symmetrical manner? For example, if we want to build a road between A and B, the goal should allow either "(road_between A B)" or "(road_between B A)" to make the PDDL robust. This should ALWAYS be done even if this could also be handled in the action. This should not apply to things physically (i.e. A block on B and B block on A)
9. Does the logic of each initial and goal state make sense? Does it align with the problem description?

# Examples
## Example 1
### Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport workers.

Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work. 

### Types
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - vehicle: Used to transport workers
    - location: Places where workers and machines can be
        - house: What is constructed.

### Given Predicates
The following are the available predicates which can be used:
- (at ?o - object ?l - location): true if the object ?o (which should be a worker or vehicle) is at location ?l
- (inside ?w - worker ?v - vehicle): true if the worker ?w is in the vehicle ?v
- (wall_order ?h - house): true if there is an order to build a wall at house ?h
- (wall_built ?h - house): true if a wall has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a floor at house ?h
- (floor_built ?h - house): true if a floor has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a roof at house ?h
- (roof_built ?h - house): true if a roof has been built for house ?h
- (finalized ?h - house): true if the house ?h has been completed. 
- (connected ?l1 - location ?l2 - location): true if there is a road between l1 and l2 allowing travel between them.

### Given State
This is the state to give feedback on based on the domain and predicates above.

## Given Object Instances
truck1 - truck - the truck at the Chicago depot
chicago_depot - house: The Chicago depot
house1 - The first house to build
house2 - The second house to build
house3 - The third house to build
jamie - administrator: The administrator Jamie
emma - general_worker: The first worker, Emma
bob - general_worker: The second worker, Bob

## Given Initial
(at truck1 chicago_depot): the truck is at the chicago_depot
(at jamie chicago_depot): Jamie is at the depot
(at emma chicago_depot): Emma is at the depot
(connected house1 chicago_depot): house1 is connected to the chicago_depot
(connected house2 chicago_depot): house2 is connected to the chicago_depot
(connected house3 chicago_depot): house3 is connected to the chicago_depot

## Given Goal
```
(AND ; all the following should be done
   (AND ; all the houses should be done
      (finalized house1) ; house 1 is done
      (finalized house2) ; house 2 is done
      (finalized house3) ; house 3 is done
   )
   (at truck1 chicago_depot); the truck is returned
)
```

### Feedback
1. Are any necessary objects missing?
    The description states that there are "a couple of trucks". This entails that at least two trucks exist, but only one is defined. At least one more should be added. Therefore: Yes. 

2. Are any unnecessary objects included?
    All the objects which are included are actually described and needed. So: No.

3. Are any objects defined with the wrong type?
    The "house" type is supposed to be used for what is being constructed, the houses built. However, "chicago_depot" is cleraly not being built by us, but is defined as a "house". It should be just a general location. Thereby: Yes.

4. Are any needed or expected predicates missing from the initial state?
    Naturally, everything needs a starting location and most of the objects are assumed to start at the chicago_depot, which makes sense. However, "bob" lacks a starting position. Furthermore, some predicates (connected) should be made symmetrical, see below. Hence: Yes.

5. Are any unnecessary or incorrect predicates declared?
    All the predicates which are initiated are valid and needed. As such: No. 

6. Is anything missing from the goal state?
    What is requested is, implicitly, that all the houses be finalized. This is checked, so: No.

7. Is anything unnecessary included in the goal description?
    The wanted position of the truck is not specified and isn't needed for the task to be considered to be completed. This should be removed. Hence: Yes.

8. Should any predicate be used in a symmetrical manner?
    The "connected" predicate clearly specifies that travel is possible in both directions, which means that (connected A B) should entail (connected B A).
    Therefore, each "connected" predicate should be mirrored to clarify that they're connected in both directions. This makes the PDDL more robust.
    Even though this could have been handled by the actions, we can't guarantee that it is and as such we have to mirror all these predicates.
    Thereby: Yes.

9. Does the logic of each initial and goal state make sense? Does it align with the problem description?

My concrete suggestions are the following:
    - Add a second truck ("truck2"). Initialize it with the following:
        - (at truck2 chicago_depot)
    - The "chicago_depot" is incorrectly modelled as a "house". It should instead be a "location". Correct this:
        - chicago_depot - location
    - The starting location for "bob" is missing. Add this in with the following predicate:
        - (at bob chicago_depot)
    - Remove the requirement for truck1:s location in the goal. This results in the following goal:
        ```
        (AND ; all the houses should be done
            (finalized house1) ; house 1 is done
            (finalized house2) ; house 2 is done
            (finalized house3) ; house 3 is done
        )
        ```
    - Make sure that the "connected" predicates are all used symmetrically. For this, you need to include all the following in the initial state:
        - (connected house1 chicago_depot): house1 is connected to the chicago_depot
        - (connected chicago_depot house1): chicago_depot is connected to house1
        - (connected house2 chicago_depot): house2 is connected to the chicago_depot
        - (connected chicago_depot house2): chicago_depot is connected to house2
        - (connected house3 chicago_depot): house3 is connected to the chicago_depot
        - (connected chicago_depot house3): chicago_depot is connected to house3