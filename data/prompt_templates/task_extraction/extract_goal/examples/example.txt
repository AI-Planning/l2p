The following is an in-context example following the CoT technique.

Given domain:
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things. 
Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work.

Given types:
"""
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - vehicle: Used to transport workers
    - location: Places where workers and machines can be
        - house: What is constructed.
"""

Given predicates:
"""
- (at ?o - object ?l - location): true if the object ?o (which should be a worker or vehicle) is at location ?l
- (inside ?w - worker ?v - vehicle): true if the worker ?w is in the vehicle ?v
- (wall_order ?h - house): true if there is an order to build a wall at house ?h
- (wall_built ?h - house): true if a wall has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a floor at house ?h
- (floor_built ?h - house): true if a floor has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a roof at house ?h
- (roof_built ?h - house): true if a roof has been built for house ?h
- (finalized ?h - house): true if the house ?h has been completed. 
- (connected ?l1 - location ?l2 - location): true if there is a road between l1 and l2 allowing travel between them.
"""

Given objects:
"""
truck1 - vehicle
truck2 - vehicle
chicago_depot - location
house1 - house
house2 - house
house3 - house
jamie - administrator
emma - general_worker
bob - general_worker
"""

-----------------------------------------------------

1. Reason through each object and their respective predicates to produce a PDDL goal state:
```
(AND ; all the following should be done
   (finalised house1) ; house 1 is done
   (finalised house2) ; house 2 is done
   (finalised house3) ; house 3 is done
   (truck1 house1) ; truck1 is at house1 
)
```

2. Feedback + suggestion:
    1. Are any unnecessary or incorrect predicates initialised?
    All the predicates which are initiated are valid and needed. As such: No. 

    2. Is anything forgotten from the goal state?
    What is requested is, implicitly, that all the houses be finalized. This is checked, so: No.

    3. Is anything superflous included in the goal?
    The wanted position of the truck is not specified and isn't needed for the task to be considered to be completed. This should be removed. Hence: Yes.

    4. Should any predicate be used in a symmetrical manner?
    The "connected" predicate clearly specifies that travel is possible in both directions, which means that (connected A B) should entail (connected B A).
    Therefore, each "connected" predicate should be mirrored to clarify that they're connected in both directions. This makes the PDDL more robust.
    However, this is already done. As such: No. 

My concrete suggestions are the following:
    - Remove the requirement for truck1:s location in the goal. This results in the following goal:
        ```
        (AND ; all the houses should be done
            (finalized house1) ; house 1 is done
            (finalized house2) ; house 2 is done
            (finalized house3) ; house 3 is done
        )
        ```

Suggestion response: For the goal, we remove the "truck1" location predicate, but still check that all the houses are finalised.

3. Re-iterate the corrected goal state under the following header in string format

## OUTPUT
(AND ; all the following should be done
   (finalised house1) ; house 1 is done
   (finalised house2) ; house 2 is done
   (finalised house3) ; house 3 is done
)