The following is an in-context example following the CoT technique.

Given domain:
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things. Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work.

Given types:
"""
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - vehicle: Used to transport workers
    - location: Places where workers and machines can be
        - house: What is constructed.
"""

Given predicates:
"""
- (at ?o - object ?l - location): true if the object ?o (which should be a worker or vehicle) is at location ?l
- (inside ?w - worker ?v - vehicle): true if the worker ?w is in the vehicle ?v
- (wall_order ?h - house): true if there is an order to build a wall at house ?h
- (wall_built ?h - house): true if a wall has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a floor at house ?h
- (floor_built ?h - house): true if a floor has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a roof at house ?h
- (roof_built ?h - house): true if a roof has been built for house ?h
- (finalized ?h - house): true if the house ?h has been completed. 
- (connected ?l1 - location ?l2 - location): true if there is a road between l1 and l2 allowing travel between them.
"""

-----------------------------------------------------

1. Identify key terms in problem description:
We assume that there are two trucks since the description said "a couple".
```
truck1 - the first truck at the Chicago depot
truck2 - the second truck at the Chicago depot
```

Next, let's define the relevant locations. Since "chicago_depot" is not a house, we model it as a general location.
```
chicago_depot - location: The Chicago depot
house1 - The first house to build
house2 - The second house to build
house3 - The third house to build
```

Now, let's model the worker.
```
jamie - administrator: The administrator Jamie
emma - general_worker: The first worker, Emma
bob - general_worker: The second worker, Bob
```

2. Feedback
    1. Are any necessary objects forgotten? Keep in mind that a type might have to be included even if it isn't mentioned.
        The description states that there are "a couple of trucks". This entails that many trucks exist, but only two are defined. Add some more. Therefore: Yes. 

    2. Are any un-necessary objects included? If things are irrelevant they shouldn't be included.
        All the objects which are included are actually described and needed. So: No.

    3. Are any objects defined as the wrong type? The objects should of course be defined correctly. 
        The "house" type is supposed to be used for what is being constructed, the houses built. However, "chicago_depot" is cleraly not being built by us, but is defined as a "house". It should be just a general location. Thereby: Yes.

Response: all feedback is correct, no suggestions.

3. Re-iterate over all objects if suggestion needed. Otherwise, define them under the capitalized header as final input: '## OBJECTS':

## OBJECTS
```
truck1 - truck
```