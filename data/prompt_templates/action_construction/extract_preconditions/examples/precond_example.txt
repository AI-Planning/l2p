The following is an in-context example following the CoT technique.

Given domain:
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things.

Given action: 
'drive'

Given action description:
'A vehicle drives from a location to another. Requires that the vehicle is at the starting location and that the two locations are connected. Example: truck1 drives from loc1 to house1.'

Given parameters:
```
?v - vehicle: The vehicle travelling
?from - location: The location travelling from
?to - location: The location travelling to
```

## Available Predicates:
No predicate has been defined yet.

-----------------------------------------------------

1. Reason with parameters and action description to identify natural language precondition and predicates needed:
To be able to drive from ?from to ?to it's specified that:
    1: The truck has to be at the starting location.
    2: The two locations have to be connected.

For this we'll need two predicates:
 - "at" to define where something is. This should probably work for both vehicles and all workers, so let's define it as "(at ?o - object ?l - location)".
 - "connected" to define if two locations are connected. This would entail that we can travel between the locations with a vehicle "(connected ?l1 - location ?l2 - location) 

Furthermore, we can assume that the two locations have to be different:
    3: The locations are different

For this we can use the existing PDDL predicate "=".

2. Specify natural language precondition in PDDL format:
```
(and ; All these have to hold
    (at ?v ?from) ; The vehicle is at the starting location
    (connected ?to ?from) ; ?to and ?from are connected by a road
    (not (= ?to ?from)) ; The locations are different
)
```

3. Specify the created/used predicates from precondition creation in PDDL:
### New Predicates
The first predicate we created is "at" which shows where something is. To make it compatible for both vehicles and workers, we use the general object type.
```
(at ?o - object ?l - location): true if the object ?o (a vehicle or a worker) is at the location ?l
```

The next we added is the "connected" predicate which indicates that a road exists between two locations.
```
(connected ?l1 - location ?l2 - location): true if a road exists between ?l1 and ?l2 allowing vehicle travel between them.
``` 

4. Feedback
    1: Are any necessary precondition checks forgotten?
        The action explicitly states that the vehicle has to be at the starting location and that the two locations have to be connected. Both of these are checked. Thereby: No. 

    2: Are any non-necessary preconditions checked?
        The precondition schecked is needed, though connected should be used symmetrically (see below). Hence: No.

    3: Are the used predicates unclear or can be improved?
        With the exception of the symmetrical use of "connected", which is detailed below, it's clear. So: No.

    4: Should any predicate be used symmetrically and isn't?
        Since roads are undirected, we need to check if there is a road from ?from to ?to or vice versa. Not doing so creates brittle PDDL. As such: Yes.

    You should take the following concrete steps:
        - Add a "has_fuel" predicate to check that the vehicle has fuel. This should be checked before moving and then emptied.
        - Make sure that both directions are checked for a road by replacing "(connected ?from ?to)" with "(or (connected ?from ?to) (connected ?to ?from))"
        - This would result in the following precondition:
            ```
            (and
                (at ?v ?from)
                (or (connected ?from ?to) (connected ?to ?from))
            )
            ``` 

Response: the suggestion to check "connected" both ways is a good idea. Now, we'll make the change to check both directions of the "connected" predicate as to create more robust PDDL. We will keep the same predicates as before.

5. Re-iterate:

### Action Preconditions
```
(and
    (at ?v ?from) ; The vehicle is at the starting location
    (or (connected ?from ?to) (connected ?to ?from)) ; A road exists between the locations
)
```

### New Predicates
```
- (at ?o - object ?l - location): true if the object ?o (a vehicle or a worker) is at the location ?l
- (connected ?l1 - location ?l2 - location): true if a road exists between ?l1 and ?l2 allowing vehicle travel between them.
``` 