(define (domain logistics)
    (:requirements :existential-preconditions :strips :typing)
    (:types city location package vehicle - object plane truck - vehicle)
    (:predicates (at ?v - vehicle ?l - location)  (at_airport ?v - vehicle ?c - city)  (at_location ?p - package ?l - location)  (in ?p - package ?v - vehicle)  (in_city ?l - location ?c - city)  (plane ?p - plane)  (truck ?t - truck))
    (:action drive-truck
        :parameters (?t - truck ?from - location ?to - location)
        :precondition (and (at ?t ?from) (exists (?c - city) (and (in_city ?from ?c) (in_city ?to ?c))))
        :effect (and (at ?t ?to) (not (at ?t ?from)))
    )
     (:action fly-plane
        :parameters (?pl - plane ?from - city ?to - city)
        :precondition (at_airport ?pl ?from)
        :effect (and (at_airport ?pl ?to) (not (at_airport ?pl ?from)))
    )
     (:action load-plane
        :parameters (?p - package ?pl - plane ?a - location ?c - city)
        :precondition (and (at_airport ?pl ?c) (at_location ?p ?a) (in_city ?a ?c))
        :effect (and (in ?p ?pl) (not (at_location ?p ?a)))
    )
     (:action load-truck
        :parameters (?p - package ?t - truck ?l - location)
        :precondition (and (at ?t ?l) (at_location ?p ?l))
        :effect (and (in ?p ?t) (not (at_location ?p ?l)))
    )
     (:action unload-plane
        :parameters (?p - package ?pl - plane ?a - location ?c - city)
        :precondition (and (at_airport ?pl ?c) (in ?p ?pl) (in_city ?a ?c))
        :effect (and (at_location ?p ?a) (not (in ?p ?pl)))
    )
     (:action unload-truck
        :parameters (?p - package ?t - truck ?l - location)
        :precondition (and (at ?t ?l) (in ?p ?t))
        :effect (and (at_location ?p ?l) (not (in ?p ?t)))
    )
)