(define (domain test_domain)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types location - object arm block table - physical_object)
    (:predicates (at ?o - object ?l - location)  (clear ?b - block)  (empty ?a - arm)  (holding ?a - arm ?b - block)  (on ?b1 - block ?b2 - block))
    (:action pickup
        :parameters (?a - arm ?b - block ?t - table)
        :precondition (and (at ?a ?t) (clear ?b) (empty ?a))
        :effect (and (not (clear ?b)) (not (empty ?a)) (holding ?a ?b) (not (at ?b ?t)))
    )
     (:action putdown
        :parameters (?a - arm ?b - block ?t - table)
        :precondition (and (at ?a ?t) (holding ?a ?b) (clear ?b))
        :effect (and (not (holding ?a ?b)) (on ?b ?t) (clear ?t) (empty ?a))
    )
     (:action stack
        :parameters (?a - arm ?b1 - block ?b2 - block)
        :precondition (and (holding ?a ?b1) (clear ?b2))
        :effect (and (not (holding ?a ?b1)) (not (clear ?b2)) (on ?b1 ?b2) (empty ?a))
    )
     (:action unstack
        :parameters (?a - arm ?b1 - block ?b2 - block)
        :precondition (and (empty ?a) (clear ?b1) (on ?b1 ?b2) (at ?a ?l))
        :effect (and (holding ?a ?b1) (not (on ?b1 ?b2)) (clear ?b2) (not (empty ?a)))
    )
)