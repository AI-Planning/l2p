(define (domain test_domain)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types arm block - object location)
    (:predicates (at ?block - object ?l - location)  (empty ?arm - object)  (held ?block - object ?arm - object)  (stacked ?b1 - object ?b2 - object))
    (:action pick_up
        :parameters (?arm - object ?block - object ?location - location)
        :precondition (and (empty ?arm) (at ?block ?location))
        :effect (and (not (at ?block ?location)) (held ?block ?arm))
    )
     (:action put_down
        :parameters (?arm - arm ?block - block ?location - location)
        :precondition (and (held ?block ?arm) (empty ?location))
        :effect (and (not (held ?block ?arm)) (at ?block ?location))
    )
     (:action stack
        :parameters (?arm - object ?block1 - object ?block2 - object ?location - location)
        :precondition (and (not (empty ?arm)) (held ?arm ?block1) (at ?block2 ?location))
        :effect (and (not (held ?arm ?block1)) (stacked ?block1 ?block2))
    )
     (:action unstack
        :parameters (?arm - object ?block_held - object ?block_target - object)
        :precondition (and (held ?block_held) (stacked ?block_target ?block_held))
        :effect (and (not (held ?block_held)) (not (stacked ?block_target ?block_held)))
    )
)