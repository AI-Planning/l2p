(define (domain test_domain)
    (:requirements :conditional-effects :disjunctive-preconditions :equality :negative-preconditions :strips :typing :universal-preconditions)
    (:types city - location location vehicle - object airplane truck - vehicle)
    (:predicates (at ?o - object ?l - location)  (connected ?l1 - location ?l2 - location))
    (:action move_airplane
        :parameters (?a - airplane ?from - city ?to - city)
        :precondition (and (at ?a ?from) (or (connected ?from ?to) (connected ?to ?from)))
        :effect (and (not (at ?a ?from)) (at ?a ?to))
    )
     (:action move_truck
        :parameters (?truck - vehicle ?from - location ?to - location)
        :precondition (and (at ?truck ?from) (or (connected ?from ?to) (connected ?to ?from)))
        :effect (and (not (at ?truck ?from)) (at ?truck ?to))
    )
)