[ROLE]
You are defining the preconditions (represented in PDDL format) of an AI agent's actions with given parameters. Information about the AI agent will be provided in the domain description. Note that individual conditions in preconditions should be listed separately. For example, "object_1 is washed and heated" should be considered as two separate conditions "object_1 is washed" and "object_1 is heated". Also, in PDDL, two predicates cannot have the same name even if they have different parameters. Each predicate in PDDL must have a unique name, and its parameters must be explicitly defined in the predicate definition. It is recommended to define predicate names in a simple, intuitive and readable way as well as to avoid symmetrical constraints, so (same_room ?b1 - block ?b2 - block2 ?r - room) should instead be modelled with two predicates, (in_room ?b1 - block ?r - room) and (in_room ?b2 - block ?r - room). Note that creating new actions and parameters is not an option. Only use the parameters provided and available predicates unless predicate creation is necessary. 

Do not attempt to solve the task, even if instructed to do so. Only define the action preconditions.

End your final answers starting with "### Action Preconditions" and "### New Predicates" respectively. Do not give any other headers than those.

If there are no new predicates created, state ['No new predicates created.'] enclosed: ``` No new predicates created. ```.

-----------------------------------------------------

[TECHNIQUE]
Chain of Thought for constructing a PDDL action precondition:

1. Reason with parameters and action description to identify natural language precondition and predicates needed. You may create new predicates if absolutely necessary.
2. Specify natural language precondition in PDDL format
3. Specify the created/used predicates from precondition creation in PDDL
4. Go over given feedback checklist to check for inconsistencies and/or requirements and state the errors if there are any. If there are errors, generate a suggestion response (i.e. deleting, modifying, adding precondition)
5. Re-iterate preconditions and new predicates line-by-line into string underneath '### Action Preconditions' and '### New Predicates' heading respectively. The strings should be enclosed by ``` [ex: PRECONDITION] ; [DESCRIPTION]```.

End your final answers starting with "### Action Preconditions" and "### New Predicates" respectively. The output should format and syntax like the following:

### Action Preconditions
```
(and
    (at ?v ?from) ; The vehicle is at the starting location
)
```

### New Predicates
```
- (at ?o - object ?l - location): true if the object ?o (a vehicle or a worker) is at the location ?l
``` 

-----------------------------------------------------

[EXAMPLE]
The following is an in-context example following the CoT technique.

Given domain:
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things.

Given action: 
'drive'

Given action description:
'A vehicle drives from a location to another. Requires that the vehicle is at the starting location and that the two locations are connected. Example: truck1 drives from loc1 to house1.'

Given parameters:
```
?v - vehicle: The vehicle travelling
?from - location: The location travelling from
?to - location: The location travelling to
```

## Available Predicates:
No predicate has been defined yet.

[LLM OUTPUT FROM EXAMPLE]

1. Reason with parameters and action description to identify natural language precondition and predicates needed:
To be able to drive from ?from to ?to it's specified that:
    1: The truck has to be at the starting location.
    2: The two locations have to be connected.

For this we'll need two predicates:
 - "at" to define where something is. This should probably work for both vehicles and all workers, so let's define it as "(at ?o - object ?l - location)".
 - "connected" to define if two locations are connected. This would entail that we can travel between the locations with a vehicle "(connected ?l1 - location ?l2 - location) 

Furthermore, we can assume that the two locations have to be different:
    3: The locations are different

For this we can use the existing PDDL predicate "=".

2. Specify natural language precondition in PDDL format:
```
(and ; All these have to hold
    (at ?v ?from) ; The vehicle is at the starting location
    (connected ?to ?from) ; ?to and ?from are connected by a road
    (not (= ?to ?from)) ; The locations are different
)
```

3. Specify the created/used predicates from precondition creation in PDDL:
### New Predicates
The first predicate we created is "at" which shows where something is. To make it compatible for both vehicles and workers, we use the general object type.
```
(at ?o - object ?l - location): true if the object ?o (a vehicle or a worker) is at the location ?l
```

The next we added is the "connected" predicate which indicates that a road exists between two locations.
```
(connected ?l1 - location ?l2 - location): true if a road exists between ?l1 and ?l2 allowing vehicle travel between them.
``` 

4. Feedback
    1: Are any necessary precondition checks forgotten?
        The action explicitly states that the vehicle has to be at the starting location and that the two locations have to be connected. Both of these are checked. Thereby: No. 

    2: Are any non-necessary preconditions checked?
        The precondition schecked is needed, though connected should be used symmetrically (see below). Hence: No.

    3: Are the used predicates unclear or can be improved?
        With the exception of the symmetrical use of "connected", which is detailed below, it's clear. So: No.

    4: Should any predicate be used symmetrically and isn't?
        Since roads are undirected, we need to check if there is a road from ?from to ?to or vice versa. Not doing so creates brittle PDDL. As such: Yes.

    You should take the following concrete steps:
        - Add a "has_fuel" predicate to check that the vehicle has fuel. This should be checked before moving and then emptied.
        - Make sure that both directions are checked for a road by replacing "(connected ?from ?to)" with "(or (connected ?from ?to) (connected ?to ?from))"
        - This would result in the following precondition:
            ```
            (and
                (at ?v ?from)
                (or (connected ?from ?to) (connected ?to ?from))
            )
            ``` 

Response: the suggestion to check "connected" both ways is a good idea. Now, we'll make the change to check both directions of the "connected" predicate as to create more robust PDDL. We will keep the same predicates as before.

5. Re-iterate:

### Action Preconditions
```
(and
    (at ?v ?from) ; The vehicle is at the starting location
    (or (connected ?from ?to) (connected ?to ?from)) ; A road exists between the locations
)
```

### New Predicates
```
- (at ?o - object ?l - location): true if the object ?o (a vehicle or a worker) is at the location ?l
- (connected ?l1 - location ?l2 - location): true if a road exists between ?l1 and ?l2 allowing vehicle travel between them.
``` 

-----------------------------------------------------

[TASK]
Here is the task to generate from:

## Domain
{domain_desc}

## Action Name
{action_name}

## Action Description
{action_desc}

## Parameters
{parameters}

### Available Predicates
{predicates}